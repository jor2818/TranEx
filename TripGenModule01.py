#import modules
import tkinter as tk
from tkinter import *
from tkinter import filedialog
from tkinter import messagebox
import tkinter.ttk as ttk
import csv

#Input the Trip Rate and Other Constant
veh_per_day = [['vehperday', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '35.910', '26.950', '28.590', '55.150', '49.940', '67.250', '50.940', '1.970', '78.450', '219.360', '0.540', '64.810', '0.580', '0.110', '0.340', '1.040', '0.200', '0.140', '0.200', '1.490', '12.680', '25.220', '6.950', '0.220', '0.290', '0.970', '0.170', '0.110', '91.090', '42.960', '112.140', '148.840', '0.110', '1.860', '0.080', '0.150', '5.940'], 
            ['2', '16.810', '28.800', '18.410', '75.720', '58.100', '62.900', '49.040', '1.970', '49.030', '264.100', '1.250', '133.610', '0.330', '0.100', '1.060', '2.210', '0.220', '0.260', '0.280', '0.000', '16.470', '34.570', '0.000', '0.000', '0.370', '0.170', '0.170', '0.110', '92.010', '49.590', '152.510', '98.740', '0.400', '0.000', '0.000', '0.100', '32.300'], 
            ['3', '37.500', '4.470', '28.280', '52.050', '49.640', '62.040', '41.910', '3.510', '79.110', '208.720', '0.680', '467.730', '0.270', '0.100', '0.410', '1.020', '0.190', '0.130', '0.000', '0.000', '0.000', '53.450', '0.000', '0.000', '0.250', '0.780', '0.140', '0.120', '78.550', '43.670', '58.880', '191.390', '0.470', '1.890', '0.000', '0.430', '4.810'], 
            ['4', '31.320', '28.430', '44.350', '62.840', '96.560', '67.910', '54.670', '3.518', '78.770', '241.950', '0.610', '99.180', '0.570', '0.220', '0.310', '0.610', '0.530', '0.110', '0.000', '0.000', '12.990', '28.360', '0.000', '0.000', '0.000', '2.270', '0.380', '0.220', '69.570', '43.050', '113.690', '131.700', '0.120', '0.000', '0.000', '0.000', '6.140'], 
            ['5', '15.960', '22.340', '14.710', '70.350', '0.000', '57.610', '57.810', '5.140', '305.120', '150.100', '0.620', '92.350', '0.240', '0.000', '0.290', '12.690', '0.220', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.030', '2.720', '0.330', '0.210', '0.000', '29.410', '126.290', '69.040', '0.100', '0.000', '0.000', '0.000', '9.150']]

trip_per_day = [['tripperday', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '1.256', '1.279', '1.280', '1.562', '1.587', '1.819', '1.829', '2.119', '1.857', '1.971', '1.636', '1.499', '1.639', '1.728', '1.617', '1.537', '1.360', '1.562', '1.611', '1.822', '1.607', '1.639', '1.451', '2.013', '2.265', '3.007', '1.593', '1.636', '1.554', '1.487', '1.643', '1.672', '1.459', '3.124', '3.677', '3.240', '1.478'], 
            ['2', '1.147', '1.253', '1.270', '1.303', '1.655', '1.603', '2.102', '2.243', '2.832', '2.438', '1.324', '1.347', '1.664', '1.814', '1.623', '1.620', '1.503', '1.498', '1.603', '0.000', '1.299', '1.783', '0.000', '0.000', '2.582', '1.721', '1.721', '1.324', '1.631', '1.621', '1.842', '1.871', '1.608', '0.000', '0.000', '1.676', '1.990'], 
            ['3', '1.299', '1.266', '1.266', '1.653', '1.570', '1.854', '2.069', '1.883', '1.913', '1.988', '1.290', '1.588', '1.665', '1.631', '1.598', '1.533', '1.311', '1.518', '0.000', '0.000', '0.000', '1.554', '0.000', '0.000', '1.847', '2.900', '1.428', '1.505', '1.466', '1.394', '1.707', '1.615', '1.416', '2.371', '0.000', '2.521', '1.041'], 
            ['4', '1.272', '1.326', '1.298', '1.397', '1.432', '2.319', '1.543', '1.843', '1.684', '1.697', '2.320', '1.358', '1.586', '1.735', '1.613', '1.648', '1.424', '1.375', '0.000', '0.000', '1.384', '1.337', '0.000', '0.000', '0.000', '1.578', '1.343', '1.454', '1.529', '1.561', '1.480', '1.629', '1.376', '0.000', '0.000', '0.000', '1.609'], 
            ['5', '1.272', '1.272', '1.298', '1.611', '0.000', '1.664', '1.999', '2.416', '1.784', '2.074', '1.588', '1.736', '1.751', '0.000', '1.677', '1.409', '1.304', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '1.685', '2.828', '2.273', '2.060', '0.000', '1.465', '1.565', '1.427', '1.778', '0.000', '0.000', '0.000', '1.595']]

pcu_per_day = [['pcuperday', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '0.682', '0.695', '0.637', '0.729', '0.711', '0.793', '0.946', '0.766', '0.802', '0.823', '0.769', '0.765', '0.805', '0.895', '0.824', '0.654', '0.724', '0.741', '0.669', '1.025', '0.777', '0.930', '1.295', '0.955', '0.812', '1.442', '0.712', '0.716', '0.649', '0.627', '0.788', '0.860', '0.799', '0.971', '0.791', '0.740', '0.721'], 
            ['2', '0.759', '0.777', '0.704', '0.931', '0.692', '0.950', '0.899', '0.710', '0.945', '1.078', '0.402', '0.635', '1.017', '1.113', '0.944', '0.904', '0.875', '0.805', '0.609', '0.000', '0.843', '0.841', '0.000', '0.000', '0.689', '0.489', '0.489', '0.504', '0.440', '0.966', '0.855', '0.908', '0.615', '0.000', '0.000', '0.963', '0.715'], 
            ['3', '0.718', '0.709', '0.639', '0.573', '0.688', '0.677', '0.743', '0.667', '0.666', '0.726', '0.800', '0.642', '0.748', '0.831', '0.855', '0.658', '0.676', '0.612', '0.000', '0.000', '0.000', '1.113', '0.000', '0.000', '0.865', '1.646', '0.739', '0.582', '0.715', '0.636', '0.619', '0.804', '0.791', '0.971', '0.000', '0.904', '0.786'], 
            ['4', '0.697', '0.716', '0.668', '0.822', '0.822', '0.892', '1.147', '0.974', '0.853', '0.871', '0.826', '0.848', '0.657', '0.704', '0.695', '0.646', '0.739', '0.955', '0.000', '0.000', '0.795', '1.033', '0.000', '0.000', '0.000', '1.025', '0.694', '0.745', '0.554', '0.591', '0.845', '0.893', '0.854', '0.000', '0.000', '0.000', '0.668'], 
            ['5', '0.624', '0.655', '0.590', '0.826', '0.000', '0.815', '0.902', '0.805', '0.879', '0.856', '0.806', '0.855', '0.649', '0.000', '0.838', '0.615', '0.703', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.881', '0.827', '0.832', '0.806', '0.000', '0.526', '0.874', '0.891', '0.822', '0.000', '0.000', '0.000', '0.678']]

allday_in = [['AllDayin', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '44.00', '45.00', '44.50', '45.50', '44.50', '52.00', '53.50', '51.00', '39.50', '26.50', '52.00', '50.00', '49.00', '62.00', '55.00', '50.00', '48.00', '52.00', '42.00', '64.00', '52.50', '46.50', '48.50', '54.00', '50.50', '54.00', '54.50', '55.50', '57.50', '53.50', '61.00', '57.00', '50.50', '45.50', '50.50', '51.00', '51.00'], 
            ['2', '47.50', '49.00', '49.50', '35.50', '40.00', '38.00', '51.50', '55.00', '44.50', '29.50', '52.00', '58.50', '49.50', '69.50', '60.00', '51.00', '52.50', '73.00', '41.00', '0.00', '47.50', '46.00', '0.00', '0.00', '43.00', '40.00', '40.00', '53.00', '53.00', '42.50', '56.00', '58.00', '46.00', '0.00', '0.00', '58.00', '54.00'], 
            ['3', '44.50', '48.50', '52.50', '47.00', '47.50', '50.50', '52.50', '57.00', '41.00', '25.00', '49.50', '50.00', '46.00', '58.00', '56.50', '49.00', '48.50', '52.00', '0.00', '0.00', '0.00', '47.00', '0.00', '0.00', '54.50', '55.50', '65.50', '60.50', '58.00', '52.00', '62.50', '58.00', '44.50', '53.50', '0.00', '55.00', '51.50'], 
            ['4', '39.00', '45.50', '39.50', '43.00', '42.00', '48.50', '55.50', '49.50', '36.00', '26.50', '52.00', '49.50', '49.50', '59.00', '50.00', '49.00', '45.50', '55.00', '0.00', '0.00', '55.00', '47.50', '0.00', '0.00', '0.00', '48.00', '56.00', '51.00', '61.00', '56.00', '65.50', '55.00', '55.00', '0.00', '0.00', '0.00', '58.00'], 
            ['5', '48.00', '42.50', '44.50', '46.00', '0.00', '46.50', '52.00', '48.00', '40.50', '29.00', '55.00', '48.00', '50.50', '0.00', '58.50', '52.00', '45.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '75.00', '50.50', '48.00', '52.50', '0.00', '55.50', '57.50', '56.00', '52.50', '0.00', '0.00', '0.00', '57.00']]

allday_out = [['AllDayout', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '56.00', '55.00', '55.50', '54.50', '55.50', '48.00', '46.50', '49.00', '60.50', '73.50', '48.00', '50.00', '51.00', '38.00', '45.00', '50.00', '52.00', '48.00', '58.00', '36.00', '47.50', '53.50', '51.50', '46.00', '49.50', '46.00', '45.50', '44.50', '42.50', '46.50', '39.00', '43.00', '49.50', '54.50', '49.50', '49.00', '49.00'], 
            ['2', '52.50', '51.00', '50.50', '64.50', '60.00', '62.00', '48.50', '45.00', '55.50', '70.50', '48.00', '41.50', '50.50', '30.50', '40.00', '49.00', '47.50', '27.00', '59.00', '100.00', '52.50', '54.00', '0.00', '0.00', '57.00', '60.00', '60.00', '47.00', '47.00', '57.50', '44.00', '42.00', '54.00', '0.00', '0.00', '42.00', '46.00'], 
            ['3', '55.50', '51.50', '47.50', '53.00', '52.50', '49.50', '47.50', '43.00', '59.00', '75.00', '50.50', '50.00', '54.00', '42.00', '43.50', '51.00', '51.50', '48.00', '0.00', '0.00', '0.00', '53.00', '0.00', '0.00', '45.50', '44.50', '34.50', '39.50', '42.00', '48.00', '37.50', '42.00', '55.50', '46.50', '0.00', '45.00', '48.50'], 
            ['4', '61.00', '54.50', '60.50', '57.00', '58.00', '51.50', '44.50', '50.50', '64.00', '73.50', '48.00', '50.50', '50.50', '41.00', '50.00', '51.00', '54.50', '45.00', '0.00', '0.00', '45.00', '52.50', '0.00', '0.00', '0.00', '52.00', '44.00', '49.00', '39.00', '44.00', '34.50', '45.00', '45.00', '0.00', '0.00', '0.00', '42.00'], 
            ['5', '52.00', '57.50', '55.50', '54.00', '0.00', '53.50', '48.00', '52.00', '59.50', '71.00', '45.00', '52.00', '49.50', '100.00', '41.50', '48.00', '55.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '25.00', '49.50', '52.00', '47.50', '0.00', '44.50', '42.50', '44.00', '47.50', '0.00', '0.00', '0.00', '43.00']]

am_peak = [['Ampeak', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '19.24', '18.40', '18.48', '8.81', '7.10', '7.61', '7.18', '8.34', '0.00', '0.00', '8.24', '10.58', '6.72', '2.92', '5.12', '7.38', '13.38', '15.24', '11.71', '8.16', '11.55', '9.70', '8.01', '6.47', '7.65', '7.02', '29.02', '26.01', '12.34', '14.88', '8.77', '7.97', '14.49', '8.72', '5.11', '6.67', '6.31'], 
            ['2', '22.56', '32.24', '24.07', '7.46', '4.52', '6.02', '6.73', '14.55', '0.00', '0.00', '7.21', '6.52', '5.46', '4.31', '4.65', '6.05', '12.20', '12.35', '11.80', '0.00', '18.34', '9.59', '0.00', '0.00', '6.90', '25.63', '25.63', '25.54', '13.18', '14.22', '12.76', '7.74', '13.50', '0.00', '0.00', '13.84', '9.43'], 
            ['3', '21.32', '17.38', '18.63', '8.20', '6.92', '7.76', '7.19', '6.70', '0.00', '0.00', '7.79', '9.45', '5.05', '2.86', '4.57', '6.24', '12.46', '17.62', '0.00', '0.00', '0.00', '9.08', '0.00', '0.00', '7.30', '7.60', '28.11', '25.06', '11.76', '16.70', '9.22', '8.22', '13.77', '7.83', '0.00', '6.16', '6.05'], 
            ['4', '17.05', '19.46', '16.19', '8.97', '9.46', '7.90', '6.83', '9.25', '0.00', '0.00', '8.38', '9.66', '7.83', '1.44', '5.13', '8.26', '13.85', '14.30', '0.00', '0.00', '15.66', '10.34', '0.00', '0.00', '0.00', '8.33', '30.92', '24.03', '12.69', '10.74', '5.58', '7.64', '15.14', '0.00', '0.00', '0.00', '4.05'], 
            ['5', '19.95', '15.53', '20.43', '11.89', '0.00', '9.47', '9.24', '8.72', '0.00', '0.00', '9.44', '12.86', '10.32', '0.00', '7.55', '9.19', '13.98', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '5.13', '8.27', '30.43', '35.40', '0.00', '17.60', '9.51', '9.87', '15.53', '0.00', '0.00', '0.00', '12.63']]

am_peak_in = [['Ampeakin', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '12.00', '13.00', '13.00', '29.00', '31.00', '51.00', '56.00', '53.00', '0.00', '0.00', '52.00', '56.00', '50.00', '71.00', '64.00', '51.00', '56.00', '85.00', '71.00', '80.00', '84.00', '62.00', '50.00', '56.00', '50.00', '54.00', '66.00', '78.00', '78.00', '86.00', '66.00', '65.00', '68.00', '81.00', '53.00', '55.00', '52.00'], 
            ['2', '5.00', '3.00', '8.00', '9.00', '19.00', '15.00', '55.00', '39.00', '0.00', '0.00', '54.00', '72.00', '51.00', '78.00', '66.00', '49.00', '65.00', '80.00', '69.00', '0.00', '83.00', '61.00', '0.00', '0.00', '33.00', '69.00', '69.00', '77.00', '72.00', '64.00', '64.00', '68.00', '76.00', '0.00', '0.00', '68.00', '39.00'], 
            ['3', '10.00', '25.00', '23.00', '32.00', '41.00', '54.00', '47.00', '63.00', '0.00', '0.00', '50.00', '57.00', '44.00', '67.00', '64.00', '51.00', '55.00', '88.00', '0.00', '0.00', '0.00', '57.00', '0.00', '0.00', '56.00', '59.00', '73.00', '77.00', '78.00', '86.00', '68.00', '66.00', '57.00', '75.00', '0.00', '57.00', '58.00'], 
            ['4', '11.00', '15.00', '12.00', '25.00', '22.00', '39.00', '59.00', '51.00', '0.00', '0.00', '52.00', '55.00', '50.00', '66.00', '60.00', '50.00', '58.00', '84.00', '0.00', '0.00', '86.00', '66.00', '0.00', '0.00', '0.00', '50.00', '71.00', '77.00', '83.00', '88.00', '67.00', '61.00', '75.00', '0.00', '0.00', '0.00', '68.00'], 
            ['5', '15.00', '7.00', '9.00', '28.00', '0.00', '51.00', '59.00', '51.00', '0.00', '0.00', '54.00', '53.00', '53.00', '0.00', '71.00', '53.00', '53.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '75.00', '50.00', '52.00', '73.00', '0.00', '91.00', '70.00', '65.00', '62.00', '0.00', '0.00', '0.00', '25.00']]

am_peak_out = [['Ampeakout', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '88.00', '87.00', '87.00', '71.00', '69.00', '49.00', '44.00', '47.00', '0.00', '0.00', '48.00', '44.00', '50.00', '29.00', '36.00', '49.00', '44.00', '15.00', '29.00', '20.00', '16.00', '38.00', '50.00', '44.00', '50.00', '46.00', '34.00', '22.00', '22.00', '14.00', '34.00', '35.00', '32.00', '19.00', '47.00', '45.00', '48.00'], 
            ['2', '95.00', '97.00', '92.00', '91.00', '81.00', '85.00', '45.00', '61.00', '0.00', '0.00', '46.00', '28.00', '49.00', '22.00', '34.00', '51.00', '35.00', '20.00', '31.00', '0.00', '17.00', '39.00', '0.00', '0.00', '67.00', '31.00', '31.00', '23.00', '28.00', '36.00', '36.00', '32.00', '24.00', '0.00', '0.00', '32.00', '61.00'], 
            ['3', '90.00', '75.00', '77.00', '68.00', '59.00', '46.00', '53.00', '37.00', '0.00', '0.00', '50.00', '43.00', '56.00', '33.00', '36.00', '49.00', '45.00', '12.00', '0.00', '0.00', '0.00', '43.00', '0.00', '0.00', '44.00', '41.00', '27.00', '23.00', '22.00', '14.00', '32.00', '34.00', '43.00', '25.00', '0.00', '43.00', '42.00'], 
            ['4', '89.00', '85.00', '88.00', '75.00', '78.00', '61.00', '41.00', '49.00', '0.00', '0.00', '48.00', '45.00', '50.00', '34.00', '40.00', '50.00', '42.00', '35.00', '0.00', '0.00', '14.00', '34.00', '0.00', '0.00', '0.00', '50.00', '29.00', '23.00', '17.00', '12.00', '33.00', '39.00', '25.00', '0.00', '0.00', '0.00', '32.00'], 
            ['5', '85.00', '93.00', '91.00', '72.00', '0.00', '49.00', '41.00', '49.00', '0.00', '0.00', '46.00', '47.00', '47.00', '0.00', '29.00', '47.00', '47.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '25.00', '50.00', '48.00', '27.00', '0.00', '9.00', '30.00', '35.00', '38.00', '0.00', '0.00', '0.00', '75.00']]

pm_peak = [['Pmpeak', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '18.33', '19.34', '16.75', '8.67', '8.55', '8.96', '8.63', '8.40', '9.26', '11.09', '8.28', '8.28', '9.57', '9.81', '9.84', '8.28', '2.27', '9.66', '9.27', '10.39', '13.11', '7.70', '7.08', '7.62', '7.76', '8.26', '15.28', '11.50', '8.04', '7.13', '6.16', '7.03', '5.33', '8.14', '8.60', '10.35', '14.94'], 
            ['2', '13.85', '21.86', '14.20', '13.82', '10.97', '9.35', '6.69', '9.86', '12.46', '10.40', '6.67', '9.30', '6.31', '9.61', '9.35', '7.63', '2.04', '5.54', '9.12', '0.00', '16.20', '6.85', '0.00', '0.00', '5.50', '9.84', '9.84', '11.06', '7.52', '5.59', '5.01', '6.24', '5.01', '0.00', '0.00', '10.46', '11.28'], 
            ['3', '21.19', '16.64', '16.64', '6.73', '7.45', '8.54', '7.99', '6.40', '11.23', '11.91', '8.59', '7.40', '13.23', '9.51', '10.01', '8.82', '2.29', '12.92', '0.00', '0.00', '0.00', '6.39', '0.00', '0.00', '10.82', '7.34', '19.67', '16.44', '8.74', '6.49', '7.94', '7.03', '5.72', '8.99', '0.00', '11.85', '16.15'], 
            ['4', '18.19', '19.56', '16.46', '11.52', '11.31', '11.07', '10.73', '12.04', '7.98', '9.05', '9.12', '8.09', '11.62', '10.50', '10.12', '8.27', '2.19', '9.98', '0.00', '0.00', '17.33', '10.63', '0.00', '0.00', '0.00', '8.17', '15.75', '10.61', '7.54', '7.92', '5.93', '7.71', '4.53', '0.00', '0.00', '0.00', '16.87'], 
            ['5', '17.41', '20.42', '17.78', '10.49', '0.00', '10.45', '8.16', '8.82', '8.26', '12.40', '8.18', '8.32', '6.49', '0.00', '9.31', '7.68', '2.53', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '10.26', '10.40', '14.78', '11.05', '0.00', '7.49', '6.83', '7.10', '6.59', '0.00', '0.00', '0.00', '4.21']]

pm_peak_in = [['Pmpeakin', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '76.00', '77.00', '76.00', '62.00', '58.00', '53.00', '51.00', '49.00', '79.00', '53.00', '52.00', '44.00', '48.00', '53.00', '46.00', '49.00', '40.00', '19.00', '13.00', '48.00', '21.00', '31.00', '47.00', '52.00', '51.00', '54.00', '43.00', '33.00', '37.00', '21.00', '56.00', '49.00', '33.00', '10.00', '48.00', '47.00', '50.00'], 
            ['2', '90.00', '95.00', '91.00', '62.00', '61.00', '61.00', '48.00', '71.00', '89.00', '59.00', '50.00', '45.00', '48.00', '61.00', '54.00', '53.00', '40.00', '66.00', '13.00', '0.00', '12.00', '31.00', '0.00', '0.00', '53.00', '11.00', '11.00', '29.00', '34.00', '21.00', '48.00', '48.00', '16.00', '0.00', '0.00', '48.00', '69.00'], 
            ['3', '79.00', '72.00', '82.00', '62.00', '54.00', '47.00', '58.00', '51.00', '82.00', '50.00', '49.00', '43.00', '48.00', '49.00', '49.00', '47.00', '42.00', '16.00', '0.00', '0.00', '0.00', '37.00', '0.00', '0.00', '53.00', '52.00', '58.00', '44.00', '38.00', '18.00', '57.00', '50.00', '32.00', '32.00', '0.00', '53.00', '45.00'], 
            ['4', '67.00', '76.00', '67.00', '61.00', '62.00', '58.00', '52.00', '48.00', '72.00', '53.00', '52.00', '44.00', '49.00', '52.00', '40.00', '48.00', '33.00', '26.00', '0.00', '0.00', '24.00', '29.00', '0.00', '0.00', '0.00', '46.00', '41.00', '25.00', '39.00', '24.00', '64.00', '49.00', '35.00', '0.00', '0.00', '0.00', '48.00'], 
            ['5', '81.00', '78.00', '80.00', '64.00', '0.00', '42.00', '45.00', '45.00', '81.00', '58.00', '56.00', '43.00', '48.00', '0.00', '46.00', '51.00', '37.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '75.00', '51.00', '44.00', '32.00', '0.00', '20.00', '45.00', '47.00', '43.00', '0.00', '0.00', '0.00', '89.00']]

pm_peak_out = [['Pmpeakout', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '24.00', '23.00', '24.00', '38.00', '42.00', '47.00', '49.00', '51.00', '21.00', '47.00', '48.00', '56.00', '52.00', '47.00', '54.00', '51.00', '60.00', '81.00', '87.00', '52.00', '79.00', '69.00', '53.00', '48.00', '49.00', '46.00', '57.00', '67.00', '63.00', '79.00', '44.00', '51.00', '67.00', '90.00', '52.00', '53.00', '50.00'], 
            ['2', '10.00', '5.00', '9.00', '38.00', '39.00', '39.00', '52.00', '29.00', '11.00', '41.00', '50.00', '55.00', '52.00', '39.00', '46.00', '47.00', '60.00', '34.00', '87.00', '0.00', '88.00', '69.00', '0.00', '0.00', '47.00', '89.00', '89.00', '71.00', '66.00', '79.00', '52.00', '52.00', '84.00', '0.00', '0.00', '52.00', '31.00'], 
            ['3', '21.00', '28.00', '18.00', '38.00', '46.00', '53.00', '42.00', '49.00', '18.00', '50.00', '51.00', '57.00', '52.00', '51.00', '51.00', '53.00', '58.00', '84.00', '0.00', '0.00', '0.00', '63.00', '0.00', '0.00', '47.00', '48.00', '42.00', '56.00', '62.00', '82.00', '43.00', '50.00', '68.00', '68.00', '0.00', '47.00', '55.00'], 
            ['4', '33.00', '24.00', '33.00', '39.00', '38.00', '42.00', '48.00', '52.00', '28.00', '47.00', '48.00', '56.00', '51.00', '48.00', '60.00', '52.00', '67.00', '74.00', '0.00', '0.00', '76.00', '71.00', '0.00', '0.00', '0.00', '54.00', '59.00', '75.00', '61.00', '76.00', '36.00', '51.00', '65.00', '0.00', '0.00', '0.00', '52.00'], 
            ['5', '19.00', '22.00', '20.00', '36.00', '0.00', '58.00', '55.00', '55.00', '19.00', '42.00', '44.00', '57.00', '52.00', '0.00', '57.00', '49.00', '63.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '25.00', '49.00', '56.00', '68.00', '0.00', '80.00', '55.00', '53.00', '57.00', '0.00', '0.00', '0.00', '11.00']]

veh_mode = [['Mode', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '97.60', '95.70', '98.87', '85.05', '77.79', '79.43', '78.71', '73.49', '82.40', '84.69', '81.63', '80.99', '76.64', '76.63', '78.93', '82.82', '83.43', '75.52', '64.44', '70.16', '62.05', '79.14', '59.89', '85.80', '72.48', '43.50', '85.31', '61.93', '77.82', '68.23', '75.02', '86.22', '76.16', '87.80', '73.97', '88.79', '83.45'], 
            ['2', '0.84', '0.74', '0.22', '2.61', '4.95', '8.56', '10.65', '6.86', '5.89', '4.99', '1.73', '3.23', '1.26', '11.87', '6.29', '1.68', '2.34', '4.38', '5.35', '5.26', '7.53', '2.42', '30.44', '5.29', '9.16', '26.34', '5.20', '14.88', '2.84', '12.92', '7.02', '3.15', '1.64', '6.82', '6.52', '3.21', '3.62'], 
            ['3', '0.00', '0.00', '0.00', '3.80', '2.79', '4.06', '4.08', '3.78', '3.54', '3.78', '10.77', '5.39', '6.07', '8.13', '8.91', '3.46', '5.99', '3.46', '2.74', '24.58', '12.63', '16.62', '9.67', '8.91', '5.52', '27.13', '1.58', '2.16', '3.62', '2.34', '4.61', '5.81', '13.41', '5.38', '3.84', '4.95', '4.70'], 
            ['4', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00']]


#Converse list from string to float and integer number
for i in range(1,len(veh_per_day)):
    for j in range(38):
        if j == 0:
            veh_per_day[i][j] = int(veh_per_day[i][j])
        else:
            veh_per_day[i][j]=float(veh_per_day[i][j])

for i in range(1,len(trip_per_day)):
    for j in range(38):
        if j == 0:
            trip_per_day[i][j] = int(trip_per_day[i][j])
        else:
            trip_per_day[i][j]=float(trip_per_day[i][j])

for i in range(1,len(pcu_per_day)):
    for j in range(38):
        if j == 0:
            pcu_per_day[i][j] = int(pcu_per_day[i][j])
        else:
            pcu_per_day[i][j]=float(pcu_per_day[i][j])

for i in range(1,len(allday_in)):
    for j in range(38):
        if j == 0:
            allday_in[i][j] = int(allday_in[i][j])
        else:
            allday_in[i][j]=float(allday_in[i][j])

for i in range(1,len(allday_out)):
    for j in range(38):
        if j == 0:
            allday_out[i][j] = int(allday_out[i][j])
        else:
            allday_out[i][j]=float(allday_out[i][j])

for i in range(1,len(am_peak)):
    for j in range(38):
        if j == 0:
            am_peak[i][j] = int(am_peak[i][j])
        else:
            am_peak[i][j]=float(am_peak[i][j])

for i in range(1,len(am_peak_in)):
    for j in range(38):
        if j == 0:
            am_peak_in[i][j] = int(am_peak_in[i][j])
        else:
            am_peak_in[i][j]=float(am_peak_in[i][j])

for i in range(1,len(am_peak_out)):
    for j in range(38):
        if j == 0:
            am_peak_out[i][j] = int(am_peak_out[i][j])
        else:
            am_peak_out[i][j]=float(am_peak_out[i][j])

for i in range(1,len(pm_peak)):
    for j in range(38):
        if j == 0:
            pm_peak[i][j] = int(pm_peak[i][j])
        else:
            pm_peak[i][j]=float(pm_peak[i][j])

for i in range(1,len(pm_peak_in)):
    for j in range(38):
        if j == 0:
            pm_peak_in[i][j] = int(pm_peak_in[i][j])
        else:
            pm_peak_in[i][j]=float(pm_peak_in[i][j])

for i in range(1,len(pm_peak_out)):
    for j in range(38):
        if j == 0:
            pm_peak_out[i][j] = int(pm_peak_out[i][j])
        else:
            pm_peak_out[i][j]=float(pm_peak_out[i][j])

for i in range(1,len(veh_mode)):
    for j in range(38):
        if j == 0:
            veh_mode[i][j] = int(veh_mode[i][j])
        else:
            veh_mode[i][j]=float(veh_mode[i][j])


#Set up the Main Frame
root = Tk()
root.title("TRIP GENERATION AND MODAL SPLIT MODULE")
width = 500
height = 400
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x = (screen_width/2)-(width/2)
y = (screen_height/2)-(height/2)
root.geometry("%dx%d+%d+%d" %(width,height,x,y))
root.resizable(0,0)

#Construct the notebook
main_screen = ttk.Notebook(root)
tab_input = ttk.Frame(main_screen)
main_screen.add(tab_input, text='1.INPUT')
tab_analyst = ttk.Frame(main_screen)
main_screen.add(tab_analyst,text='2.ANALYSIS')
tab_output = ttk.Frame(main_screen)
main_screen.add(tab_output,text='3.OUTPUT')

main_screen.pack(expand=1,fill='both')


def openCSV():
    try:
        trip_filename = filedialog.askopenfilename(initialdir="/",filetypes=[("text Document","*.txt"),("All File","*.*")])
        with open(trip_filename) as obj_trip:
            arrayreader1 = csv.reader(obj_trip)
            global bl_area
            bl_area = []
            bl_area = list(arrayreader1)
            #converse header to string
            for i in range(len(bl_area)):
                for j in range(len(bl_area[0])):
                    if i==0:
                        bl_area[i][j]=str(bl_area[i][j])
            #converse number of Zone to integer
            for i in range(1,len(bl_area)):
                bl_area[i][0] = int(bl_area[i][0])
            #converse area to unit of analysis
            for i in range(1,len(bl_area)):
                for j in range(1,len(bl_area[0])):
                    if j<=7:
                        bl_area[i][j] = float(bl_area[i][j])/1000
                    elif j==8:
                        bl_area[i][j] = float(bl_area[i][j])/50
                    elif j<=10:
                        bl_area[i][j] = float(bl_area[i][j])/1000
                    elif j==11:
                        bl_area[i][j] = float(bl_area[i][j])
                    elif j<=13:
                        bl_area[i][j] = float(bl_area[i][j])/1000
                    elif j<=19:
                        bl_area[i][j] = float(bl_area[i][j])
                    elif j==20:
                        bl_area[i][j] = float(bl_area[i][j])/1600
                    elif j<=22:
                        bl_area[i][j] = float(bl_area[i][j])/1000
                    elif j<=28:
                        bl_area[i][j] = float(bl_area[i][j])
                    elif j<=32:
                        bl_area[i][j] = float(bl_area[i][j])/1000
                    elif j==33:
                        bl_area[i][j] = float(bl_area[i][j])
                    elif j==34:
                        bl_area[i][j] = float(bl_area[i][j])/1000
                    elif j<=36:
                        bl_area[i][j] = float(bl_area[i][j])
                    else:
                        bl_area[i][j] = float(bl_area[i][j])/1000

            #Show the result
            for i in range(1,len(bl_area)):
                tree.insert("",'end',values=(bl_area[i][0],bl_area[i][1],bl_area[i][2],bl_area[i][3],bl_area[i][4],bl_area[i][5],bl_area[i][6],bl_area[i][7],bl_area[i][8],bl_area[i][9],bl_area[i][10],bl_area[i][11],bl_area[i][12],bl_area[i][13],bl_area[i][14],bl_area[i][15],bl_area[i][16],bl_area[i][17],bl_area[i][18],bl_area[i][19],bl_area[i][20],bl_area[i][21],bl_area[i][22],bl_area[i][23],bl_area[i][24],bl_area[i][25],bl_area[i][26],bl_area[i][27],bl_area[i][28],bl_area[i][29],bl_area[i][30],bl_area[i][31],bl_area[i][32],bl_area[i][33],bl_area[i][34],bl_area[i][35],bl_area[i][36],bl_area[i][37]))
        #Enabled the buttom
        bt1.configure(state='enabled')
        my_btn.configure(state='disabled')
    except:
        messagebox.showwarning("Warning....","Error!! input file, Please check the format and value of building area usage data")

def cal_tripend():
    global trip_endin
    global trip_endout
    trip_endin = []
    trip_endout = []
    #Assign the zero to list
    for j in range(len(bl_area)):
        column = []
        for i in range(38):
            column.append(0)
        trip_endin.append(column)
    #Assign the zero to list
    for j in range(len(bl_area)):
        column = []
        for i in range(38):
            column.append(0)
        trip_endout.append(column)
    #Define the TAZ name
    for i in range(1,len(bl_area)):
        trip_endin[i][0] = bl_area[i][0]
    #Define the TAZ name
    for i in range(1,len(bl_area)):
        trip_endout[i][0] = bl_area[i][0]
    #Choose city type, period of time and unit
    if city_type_var.get()==1:
        if unit_var.get()==1:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[1][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[1][j]/100
        elif unit_var.get()==2:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[1][j]*trip_per_day[1][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[1][j]*trip_per_day[1][j]/100
        elif unit_var.get()==3:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[1][j]*pcu_per_day[1][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[1][j]*pcu_per_day[1][j]/100
        elif unit_var.get()==4:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*am_peak[1][j]*am_peak_in[1][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*am_peak[1][j]*am_peak_out[1][j]/10000
        elif unit_var.get()==5:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*am_peak[1][j]*am_peak_in[1][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*am_peak[1][j]*am_peak_out[1][j]/10000
        elif unit_var.get()==6:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*am_peak[1][j]*am_peak_in[1][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*am_peak[1][j]*am_peak_out[1][j]/10000
        elif unit_var.get()==7:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*pm_peak[1][j]*pm_peak_in[1][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*pm_peak[1][j]*pm_peak_out[1][j]/10000
        elif unit_var.get()==8:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*pm_peak[1][j]*pm_peak_in[1][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*pm_peak[1][j]*pm_peak_out[1][j]/10000
        else:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*pm_peak[1][j]*pm_peak_in[1][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*pm_peak[1][j]*pm_peak_out[1][j]/10000
    elif city_type_var.get()==2:
        if unit_var.get()==1:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[2][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[2][j]/100
        elif unit_var.get()==2:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[2][j]*trip_per_day[2][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[2][j]*trip_per_day[2][j]/100
        elif unit_var.get()==3:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[2][j]*pcu_per_day[2][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[2][j]*pcu_per_day[2][j]/100
        elif unit_var.get()==4:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*am_peak[2][j]*am_peak_in[2][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*am_peak[2][j]*am_peak_out[2][j]/10000
        elif unit_var.get()==5:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[1][j]*am_peak[2][j]*am_peak_in[2][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[1][j]*am_peak[2][j]*am_peak_out[2][j]/10000
        elif unit_var.get()==6:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*am_peak[1][j]*am_peak_in[2][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*am_peak[1][j]*am_peak_out[2][j]/10000
        elif unit_var.get()==7:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*pm_peak[2][j]*pm_peak_in[2][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*pm_peak[2][j]*pm_peak_out[2][j]/10000
        elif unit_var.get()==8:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[2][j]*pm_peak[2][j]*pm_peak_in[2][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[2][j]*pm_peak[2][j]*pm_peak_out[2][j]/10000
        else:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*pm_peak[1][j]*pm_peak_in[2][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*pm_peak[1][j]*pm_peak_out[2][j]/10000
    elif city_type_var.get()==3:
        if unit_var.get()==1:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_in[3][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_out[3][j]/100
        elif unit_var.get()==2:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_in[3][j]*trip_per_day[3][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_out[3][j]*trip_per_day[3][j]/100
        elif unit_var.get()==3:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_in[3][j]*pcu_per_day[3][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_out[3][j]*pcu_per_day[3][j]/100
        elif unit_var.get()==4:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*am_peak[3][j]*am_peak_in[3][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*am_peak[3][j]*am_peak_out[3][j]/10000
        elif unit_var.get()==5:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*am_peak[3][j]*am_peak_in[3][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*am_peak[3][j]*am_peak_out[3][j]/10000
        elif unit_var.get()==6:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*am_peak[3][j]*am_peak_in[3][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*am_peak[3][j]*am_peak_out[3][j]/10000
        elif unit_var.get()==7:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*pm_peak[3][j]*pm_peak_in[3][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*pm_peak[3][j]*pm_peak_out[3][j]/10000
        elif unit_var.get()==8:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*pm_peak[3][j]*pm_peak_in[3][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*pm_peak[3][j]*pm_peak_out[3][j]/10000
        else:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*pm_peak[3][j]*pm_peak_in[3][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*pm_peak[3][j]*pm_peak_out[3][j]/10000
    elif city_type_var.get()==4:
        if unit_var.get()==1:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_in[4][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_out[4][j]/100
        elif unit_var.get()==2:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_in[4][j]*trip_per_day[4][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_out[4][j]*trip_per_day[4][j]/100
        elif unit_var.get()==3:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_in[4][j]*pcu_per_day[4][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_out[4][j]*pcu_per_day[4][j]/100
        elif unit_var.get()==4:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*am_peak[4][j]*am_peak_in[4][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*am_peak[4][j]*am_peak_out[4][j]/10000
        elif unit_var.get()==5:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*am_peak[4][j]*am_peak_in[4][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*am_peak[4][j]*am_peak_out[4][j]/10000
        elif unit_var.get()==6:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*am_peak[4][j]*am_peak_in[4][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*am_peak[4][j]*am_peak_out[4][j]/10000
        elif unit_var.get()==7:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*pm_peak[4][j]*pm_peak_in[4][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*pm_peak[4][j]*pm_peak_out[4][j]/10000
        elif unit_var.get()==8:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*pm_peak[4][j]*pm_peak_in[4][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*pm_peak[4][j]*pm_peak_out[4][j]/10000
        else:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*pm_peak[4][j]*pm_peak_in[4][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*pm_peak[4][j]*pm_peak_out[4][j]/10000
    else:
        if unit_var.get()==1:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_in[5][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_out[5][j]/100
        elif unit_var.get()==2:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_in[5][j]*trip_per_day[5][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_out[5][j]*trip_per_day[5][j]/100
        elif unit_var.get()==3:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_in[5][j]*pcu_per_day[5][j]/100
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_out[5][j]*pcu_per_day[5][j]/100
        elif unit_var.get()==4:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*am_peak[5][j]*am_peak_in[5][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*am_peak[5][j]*am_peak_out[5][j]/10000
        elif unit_var.get()==5:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*am_peak[5][j]*am_peak_in[5][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*am_peak[5][j]*am_peak_out[5][j]/10000
        elif unit_var.get()==6:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*am_peak[5][j]*am_peak_in[5][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*am_peak[5][j]*am_peak_out[5][j]/10000
        elif unit_var.get()==7:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*pm_peak[5][j]*pm_peak_in[5][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*pm_peak[5][j]*pm_peak_out[5][j]/10000
        elif unit_var.get()==8:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*pm_peak[5][j]*pm_peak_in[5][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*pm_peak[5][j]*pm_peak_out[5][j]/10000
        else:
            for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*pm_peak[5][j]*pm_peak_in[5][j]/10000
                    trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*pm_peak[5][j]*pm_peak_out[5][j]/10000
    #mode of travel
    if mode_var.get()==1:
        for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=trip_endin[i][j]*veh_mode[1][j]/100
                    trip_endout[i][j]=trip_endout[i][j]*veh_mode[1][j]/100
    elif mode_var.get()==2:
        for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=trip_endin[i][j]*veh_mode[2][j]/100
                    trip_endout[i][j]=trip_endout[i][j]*veh_mode[2][j]/100
    elif mode_var.get()==3:
        for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=trip_endin[i][j]*veh_mode[3][j]/100
                    trip_endout[i][j]=trip_endout[i][j]*veh_mode[3][j]/100
    else:
        for i in range(1,len(bl_area)):
                for j in range(1,38):
                    trip_endin[i][j]=trip_endin[i][j]*veh_mode[4][j]/100
                    trip_endout[i][j]=trip_endout[i][j]*veh_mode[4][j]/100
    global trip_endin_sum
    global trip_endout_sum
    trip_endin_sum = []
    trip_endout_sum = []
    #Assign the zero to list
    for j in range(len(bl_area)):
        column = []
        for i in range(2):
            column.append(0)
        trip_endin_sum.append(column)
    #Assign the zero to list
    for j in range(len(bl_area)):
        column = []
        for i in range(2):
            column.append(0)
        trip_endout_sum.append(column)
    #Define the TAZ name
    for i in range(1,len(bl_area)):
        trip_endin_sum[i][0] = bl_area[i][0]
    #Define the TAZ name
    for i in range(1,len(bl_area)):
        trip_endout_sum[i][0] = bl_area[i][0]
    #Calculate the trip end sum
    for i in range(1,len(bl_area)):
        for j in range(1,38):
            trip_endin_sum[i][1] = trip_endin_sum[i][1] + trip_endin[i][j]
            trip_endout_sum[i][1] = trip_endout_sum[i][1] + trip_endout[i][j]
    #Calibrate the TP and TA
    sum_tp = 0
    sum_ta = 0
    for i in range(1,len(bl_area)):
        sum_tp = sum_tp + trip_endout_sum[i][1]
        sum_ta = sum_ta + trip_endin_sum[i][1]
    for i in range(1,len(bl_area)):
        trip_endin_sum[i][1]=trip_endin_sum[i][1]*sum_tp/sum_ta
    sum_ta_cal = 0
    for i in range(1,len(bl_area)):
        sum_ta_cal = sum_ta_cal + trip_endin_sum[i][1]
    
    #Show the result
    for i in range(1,len(bl_area)):
        tree2.insert("",'end',value=(bl_area[i][0],float('{:.0f}'.format(trip_endout_sum[i][1])),float('{:.0f}'.format(trip_endin_sum[i][1]))))
    my_btn2.configure(state='enabled')
    bt1.configure(state='disabled')
    main_screen.select(2)

def exportCSV():
    #global output_file_path
    #output_file_path = filedialog.asksaveasfilename(initialdir="/",filetypes=((("CSV files", "*.csv"), ("Any file", "*")))
    with open('tripend.csv', 'w', newline='') as csvfile:
        fieldnames = ['TAZ', 'TP','TA']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for i in range(1,len(bl_area)):
            writer.writerow({'TAZ': bl_area[i][0], 'TP': float('{:.0f}'.format(trip_endout_sum[i][1])),'TA':float('{:.0f}'.format(trip_endin_sum[i][1]))})
  

#Designing the Layout
#Tab_Input Layout
label1 = ttk.Label(tab_input,text='Input Building Area Usage Data :').pack(side=TOP,padx=5,pady=5)
my_btn = ttk.Button(tab_input,text='Open file', command=lambda:openCSV(),width=10)
my_btn.pack(side=TOP,padx=5,pady=5)
TableMargin = Frame(tab_input, width=500)
TableMargin.pack(side=LEFT,fill=X,expand=YES,pady=5)
scrollbarx = Scrollbar(TableMargin, orient=HORIZONTAL)
scrollbary = Scrollbar(TableMargin, orient=VERTICAL)
tree = ttk.Treeview(TableMargin, columns=("TAZ","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","A11","A12","A13","A14","A15","A16","A17","A18","A19","A20","A21","A22","A23","A24","A25","A26","A27","A28","A29","A30","A31","A32","A33","A34","A35","A36","A37"),height=400,selectmode="extended",yscrollcommand=scrollbary.set,xscrollcommand=scrollbarx.set)
scrollbary.config(command=tree.yview)
scrollbary.pack(side=RIGHT, fill = Y)
scrollbarx.config(command=tree.xview)
scrollbarx.pack(side=BOTTOM, fill = X)
tree.heading('TAZ',text="TAZ",anchor=W)
tree.heading('A1',text="A1",anchor=W)
tree.heading('A2',text="A2",anchor=W)
tree.heading('A3',text="A3",anchor=W)
tree.heading('A4',text="A4",anchor=W)
tree.heading('A5',text="A5",anchor=W)
tree.heading('A6',text="A6",anchor=W)
tree.heading('A7',text="A7",anchor=W)
tree.heading('A8',text="A8",anchor=W)
tree.heading('A9',text="A9",anchor=W)
tree.heading('A10',text="A10",anchor=W)
tree.heading('A11',text="A11",anchor=W)
tree.heading('A12',text="A12",anchor=W)
tree.heading('A13',text="A13",anchor=W)
tree.heading('A14',text="A14",anchor=W)
tree.heading('A15',text="A15",anchor=W)
tree.heading('A16',text="A16",anchor=W)
tree.heading('A17',text="A17",anchor=W)
tree.heading('A18',text="A18",anchor=W)
tree.heading('A19',text="A19",anchor=W)
tree.heading('A20',text="A20",anchor=W)
tree.heading('A21',text="A21",anchor=W)
tree.heading('A22',text="A22",anchor=W)
tree.heading('A23',text="A23",anchor=W)
tree.heading('A24',text="A24",anchor=W)
tree.heading('A25',text="A25",anchor=W)
tree.heading('A26',text="A26",anchor=W)
tree.heading('A27',text="A27",anchor=W)
tree.heading('A28',text="A28",anchor=W)
tree.heading('A29',text="A29",anchor=W)
tree.heading('A30',text="A30",anchor=W)
tree.heading('A31',text="A31",anchor=W)
tree.heading('A32',text="A32",anchor=W)
tree.heading('A33',text="A33",anchor=W)
tree.heading('A34',text="A34",anchor=W)
tree.heading('A35',text="A35",anchor=W)
tree.heading('A36',text="A36",anchor=W)
tree.heading('A37',text="A37",anchor=W)
tree.column('#0',stretch=NO,minwidth=0,width=0)
tree.column('#1',stretch=NO,minwidth=0,width=50)
tree.column('#2',stretch=NO,minwidth=0,width=100)
tree.column('#3',stretch=NO,minwidth=0,width=100)
tree.column('#4',stretch=NO,minwidth=0,width=100)
tree.column('#5',stretch=NO,minwidth=0,width=100)
tree.column('#6',stretch=NO,minwidth=0,width=100)
tree.column('#7',stretch=NO,minwidth=0,width=100)
tree.column('#8',stretch=NO,minwidth=0,width=100)
tree.column('#9',stretch=NO,minwidth=0,width=100)
tree.column('#10',stretch=NO,minwidth=0,width=100)
tree.column('#11',stretch=NO,minwidth=0,width=100)
tree.column('#12',stretch=NO,minwidth=0,width=100)
tree.column('#13',stretch=NO,minwidth=0,width=100)
tree.column('#14',stretch=NO,minwidth=0,width=100)
tree.column('#15',stretch=NO,minwidth=0,width=100)
tree.column('#16',stretch=NO,minwidth=0,width=100)
tree.column('#17',stretch=NO,minwidth=0,width=100)
tree.column('#18',stretch=NO,minwidth=0,width=100)
tree.column('#19',stretch=NO,minwidth=0,width=100)
tree.column('#20',stretch=NO,minwidth=0,width=100)
tree.column('#21',stretch=NO,minwidth=0,width=100)
tree.column('#22',stretch=NO,minwidth=0,width=100)
tree.column('#23',stretch=NO,minwidth=0,width=100)
tree.column('#24',stretch=NO,minwidth=0,width=100)
tree.column('#25',stretch=NO,minwidth=0,width=100)
tree.column('#26',stretch=NO,minwidth=0,width=100)
tree.column('#27',stretch=NO,minwidth=0,width=100)
tree.column('#28',stretch=NO,minwidth=0,width=100)
tree.column('#29',stretch=NO,minwidth=0,width=100)
tree.column('#30',stretch=NO,minwidth=0,width=100)
tree.column('#31',stretch=NO,minwidth=0,width=100)
tree.column('#32',stretch=NO,minwidth=0,width=100)
tree.column('#33',stretch=NO,minwidth=0,width=100)
tree.column('#34',stretch=NO,minwidth=0,width=100)
tree.column('#35',stretch=NO,minwidth=0,width=100)
tree.column('#36',stretch=NO,minwidth=0,width=100)
tree.column('#37',stretch=NO,minwidth=0,width=100)
tree.column('#38',stretch=NO,minwidth=0,width=100)
tree.pack()

#tab_Analysis Layout
lb3 = ttk.Label(tab_analyst,text='Choose the Option of Analysis')
lb3.grid(row=0,columnspan=4,pady=10)

f_1 = ttk.LabelFrame(tab_analyst,text='City Type')
f_1.grid(row=2,column=0,sticky=N)
city_type_var = IntVar()
r14 = tk.Radiobutton(f_1,text='All Country',value=1,variable=city_type_var)
r14.grid(row=3,column=0,sticky=W)
r15 = tk.Radiobutton(f_1,text='Metropolis',value=2,variable=city_type_var)
r15.grid(row=4,column=0,sticky=W)
r16 = tk.Radiobutton(f_1,text='Big City',value=3,variable=city_type_var)
r16.grid(row=5,column=0,sticky=W)
r17 = tk.Radiobutton(f_1,text='Medium City',value=4,variable=city_type_var)
r17.grid(row=6,column=0,sticky=W)
r18 = tk.Radiobutton(f_1,text='Small City',value=5,variable=city_type_var)
r18.grid(row=7,column=0,sticky=W)
city_type_var.set(1)

f_2 = ttk.LabelFrame(tab_analyst,text='Period of Time and Unit of Travel')
f_2.grid(row=2,column=1,columnspan=2,sticky=N)
unit_var = IntVar()
lb1 = ttk.Label(f_2,text='All Day')
lb1.grid(row=3,column=1,sticky=N)
r1 = tk.Radiobutton(f_2,text='veh/day',value=1,variable=unit_var)
r1.grid(row=4,column=1,sticky=W)
r2 = tk.Radiobutton(f_2,text='trip/day',value=2,variable=unit_var)
r2.grid(row=5,column=1,sticky=W)
r3 = tk.Radiobutton(f_2,text='pcu/day',value=3,variable=unit_var)
r3.grid(row=6,column=1,sticky=W)
unit_var.set(1)
lb2 = ttk.Label(f_2,text='AM Peak')
lb2.grid(row=3,column=2,sticky=N)
r4 = tk.Radiobutton(f_2,text='veh/hr',value=4,variable=unit_var)
r4.grid(row=4,column=2,sticky=W)
r5 = tk.Radiobutton(f_2,text='trip/hr',value=5,variable=unit_var)
r5.grid(row=5,column=2,sticky=W)
r6 = tk.Radiobutton(f_2,text='pcu/hr',value=6,variable=unit_var)
r6.grid(row=6,column=2,sticky=W)
lb3 = ttk.Label(f_2,text='PM Peak')
lb3.grid(row=3,column=3,sticky=N)
r7 = tk.Radiobutton(f_2,text='veh/hr',value=7,variable=unit_var)
r7.grid(row=4,column=3,sticky=W)
r8 = tk.Radiobutton(f_2,text='trip/hr',value=8,variable=unit_var)
r8.grid(row=5,column=3,sticky=W)
r9 = tk.Radiobutton(f_2,text='pcu/hr',value=9,variable=unit_var)
r9.grid(row=6,column=3,sticky=W)

f_4 = ttk.LabelFrame(tab_analyst,text='Mode')
f_4.grid(row=2,column=3,sticky=NE)
mode_var = IntVar()
r10 = tk.Radiobutton(f_4,text='Car',value=1,variable=mode_var)
r10.grid(row=3,column=3,sticky=W)
r11 = tk.Radiobutton(f_4,text='Bus',value=2,variable=mode_var)
r11.grid(row=4,column=3,sticky=W)
r12 = tk.Radiobutton(f_4,text='Truck',value=3,variable=mode_var)
r12.grid(row=5,column=3,sticky=W)
r13 = tk.Radiobutton(f_4,text='Total',value=4,variable=mode_var)
r13.grid(row=6,column=3,sticky=W)
mode_var.set(4)

bt1 = ttk.Button(tab_analyst,text='Trip End',command=cal_tripend,width=10)
bt1.grid(row=11,column=1,columnspan=2,pady=20)
bt1.configure(state='disabled')

#Tab Output Layout
label2 = ttk.Label(tab_output,text='Trip End')
label2.pack(side=TOP,padx=5,pady=5)

my_btn2 = ttk.Button(tab_output,text='Export',command=exportCSV,width=10)
my_btn2.pack(side=TOP,padx=5,pady=5)
my_btn2.configure(state='disabled')

TableMargin2 = Frame(tab_output, width=500)
TableMargin2.pack(side=LEFT,fill=X,expand=YES,pady=5)
scrollbarx = Scrollbar(TableMargin2, orient=HORIZONTAL)
scrollbary = Scrollbar(TableMargin2, orient=VERTICAL)
tree2 = ttk.Treeview(TableMargin2, columns=("TAZ","TP","TA"),height=400,selectmode="extended",yscrollcommand=scrollbary.set,xscrollcommand=scrollbarx.set)
scrollbary.config(command=tree2.yview)
scrollbary.pack(side=RIGHT, fill = Y)
scrollbarx.config(command=tree2.xview)
scrollbarx.pack(side=BOTTOM, fill = X)
tree2.heading('TAZ',text="TAZ",anchor=W)
tree2.heading('TP',text="TRIP PRODUCTION",anchor=W)
tree2.heading('TA',text="TRIP ATTRACTION",anchor=W)
tree2.column('#0',stretch=NO,minwidth=0,width=0)
tree2.column('#1',stretch=NO,minwidth=0,width=100)
tree2.column('#2',stretch=NO,minwidth=0,width=150)
tree2.column('#3',stretch=NO,minwidth=0,width=150)
tree2.pack()


#Initializing the Application
if __name__ == '__main__':
    root.mainloop()